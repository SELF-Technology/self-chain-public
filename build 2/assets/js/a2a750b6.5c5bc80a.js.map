{"version":3,"file":"assets/js/a2a750b6.5c5bc80a.js","mappings":"mIA0BA,MAAMA,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAG3C,OAAO,UACL,WAEE,MAA0B,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,EACnC,EACA,CAACC,EAAmBD,GAExB,CAWO,SAASE,EAAYC,GAE1B,IAAIC,EAWJ,OAREA,EADED,EAAWE,qBAEsB,mBAA1BF,EAAWH,WACdG,EAAWH,WAAWH,GACtBM,EAAWH,YAAcH,EAEfE,EAAiBI,EAAWH,YAGvC,gBACLF,EAAWQ,SACX,CAACC,MAAOH,GACRD,EAAWK,SAEf,C,2+BChFO,MAAMC,EAAc,CAC1BC,cAAe,gBACfC,iBAAkB,GAENC,EAAe,gBAEfC,EAAS,CAEtB,EAIaC,EAAM,GACnB,SAASC,EAAkBC,GACzB,MAAMC,EAAc,CAClBC,GAAI,KACJC,OAAQ,SACRC,GAAI,KACJC,EAAG,IACHC,GAAI,SACD,YACAN,EAAMhB,YAEX,OAAO,UAAM,WAAW,CACtBQ,SAAU,EAAC,SAAKS,EAAYE,OAAQ,CAClCX,UAAU,SAAKS,EAAYC,GAAI,CAC7BK,GAAI,gBACJf,SAAU,oBAEV,MAAM,SAAKS,EAAYI,EAAG,CAC5Bb,SAAU,qMACR,MAAM,UAAMS,EAAYK,GAAI,CAC9Bd,SAAU,CAAC,MAAM,SAAKS,EAAYG,GAAI,CACpCZ,SAAU,mCACR,MAAM,SAAKS,EAAYG,GAAI,CAC7BZ,SAAU,uFACR,MAAM,SAAKS,EAAYG,GAAI,CAC7BZ,SAAU,+FACR,MAAM,SAAKS,EAAYG,GAAI,CAC7BZ,SAAU,8HACR,QACF,MAAM,SAAKS,EAAYI,EAAG,CAC5Bb,SAAU,yKACR,MAAM,SAAK,MAAO,CACpBA,UAAU,SAAK,MAAO,CACpBgB,IAAK,oDACLC,IAAK,wBAIb,CACe,SAASC,EAAWV,EAAQ,CAAC,GAC1C,MAAOW,QAASC,GAAa,KACxB,YACAZ,EAAMhB,YAEX,OAAO4B,GAAY,SAAKA,EAAW,IAC9BZ,EACHR,UAAU,SAAKO,EAAmB,IAC7BC,MAEFD,EAAkBC,EACzB,C","sources":["webpack://docs/./node_modules/@mdx-js/react/lib/index.js","webpack://docs/./docs/Technical Docs/PoAI/The Incentive.md"],"sourcesContent":["/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n","\n\nexport const frontMatter = {\n\tsidebar_label: 'The Incentive',\n\tsidebar_position: 9\n};\nexport const contentTitle = 'The Incentive';\nexport {default as metadata} from '@site/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-technical-docs-po-ai-the-incentive-md-a2a.json'\nexport const assets = {\n\n};\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nexport const toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: \"h1\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.header, {\n      children: _jsx(_components.h1, {\n        id: \"the-incentive\",\n        children: \"The Incentive\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The reward for participation is generated as a native coin, earned by helping to assemble a new block among participants in the consensus process. An example reward distribution is as follows:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"90% goes to the block builder;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"8% is distributed among the AI validators who voted for the winning block builder;\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"1% goes to the AI validator, who double-checked the block (according to the color scheme);\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"1% of the reward goes to PoAI mechanisms (credited to the blockchain's reserve fund) for organising the voting procedure.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These percentages can be revised to reflect each consensus participant's labor costs and contribution to its implementation. The example above is illustrated below:\"\n    }), \"\\n\", _jsx(\"div\", {\n      children: _jsx(\"img\", {\n        src: \"/img/Screenshot 2024-05-01 at 9.07.55â€¯AM.png\",\n        alt: \"PoAI Incentives\"\n      })\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n"],"names":["emptyComponents","MDXContext","useMDXComponents","components","contextComponents","MDXProvider","properties","allComponents","disableParentContext","Provider","value","children","frontMatter","sidebar_label","sidebar_position","contentTitle","assets","toc","_createMdxContent","props","_components","h1","header","li","p","ul","id","src","alt","MDXContent","wrapper","MDXLayout"],"sourceRoot":""}