{"version":3,"file":"assets/js/e20572fa.484f2f34.js","mappings":"+oCAEO,MAAMA,EAAc,CAC1BC,cAAe,mBACfC,iBAAkB,GAENC,EAAe,mBAEfC,EAAS,CAEtB,EAIaC,EAAM,GACnB,SAASC,EAAkBC,GACzB,MAAMC,EAAc,CAClBC,GAAI,KACJC,OAAQ,SACRC,GAAI,KACJC,EAAG,IACHC,GAAI,SACD,YACAN,EAAMO,YAEX,OAAO,UAAM,WAAW,CACtBC,SAAU,EAAC,SAAKP,EAAYE,OAAQ,CAClCK,UAAU,SAAKP,EAAYC,GAAI,CAC7BO,GAAI,mBACJD,SAAU,uBAEV,MAAM,SAAKP,EAAYI,EAAG,CAC5BG,SAAU,kQACR,MAAM,SAAKP,EAAYI,EAAG,CAC5BG,SAAU,8VACR,MAAM,SAAK,MAAO,CACpBA,UAAU,SAAK,MAAO,CACpBE,IAAK,oDACLC,IAAK,0BAEL,MAAM,SAAKV,EAAYI,EAAG,CAC5BG,SAAU,8hBACR,MAAM,SAAKP,EAAYI,EAAG,CAC5BG,SAAU,mZACR,MAAM,SAAKP,EAAYI,EAAG,CAC5BG,SAAU,wJACR,MAAM,UAAMP,EAAYK,GAAI,CAC9BE,SAAU,CAAC,MAAM,SAAKP,EAAYG,GAAI,CACpCI,SAAU,oFACR,MAAM,SAAKP,EAAYG,GAAI,CAC7BI,SAAU,oIACR,QACF,MAAM,SAAKP,EAAYI,EAAG,CAC5BG,SAAU,sZAGhB,CACe,SAASI,EAAWZ,EAAQ,CAAC,GAC1C,MAAOa,QAASC,GAAa,KACxB,YACAd,EAAMO,YAEX,OAAOO,GAAY,SAAKA,EAAW,IAC9Bd,EACHQ,UAAU,SAAKT,EAAmB,IAC7BC,MAEFD,EAAkBC,EACzB,C,wDC1CA,MAAMe,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBV,GAC/B,MAAMW,EAAoB,aAAiBF,GAG3C,OAAO,UACL,WAEE,MAA0B,mBAAfT,EACFA,EAAWW,GAGb,IAAIA,KAAsBX,EACnC,EACA,CAACW,EAAmBX,GAExB,CAWO,SAASY,EAAYC,GAE1B,IAAIC,EAWJ,OAREA,EADED,EAAWE,qBAEsB,mBAA1BF,EAAWb,WACda,EAAWb,WAAWQ,GACtBK,EAAWb,YAAcQ,EAEfE,EAAiBG,EAAWb,YAGvC,gBACLS,EAAWO,SACX,CAACC,MAAOH,GACRD,EAAWZ,SAEf,C","sources":["webpack://docs/./docs/Technical Docs/PoAI/Voting Algorithm.md","webpack://docs/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["\n\nexport const frontMatter = {\n\tsidebar_label: 'Voting Algorithm',\n\tsidebar_position: 4\n};\nexport const contentTitle = 'Voting Algorithm';\nexport {default as metadata} from '@site/.docusaurus/docusaurus-plugin-content-docs/default/site-docs-technical-docs-po-ai-voting-algorithm-md-e20.json'\nexport const assets = {\n\n};\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nexport const toc = [];\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: \"h1\",\n    header: \"header\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.header, {\n      children: _jsx(_components.h1, {\n        id: \"voting-algorithm\",\n        children: \"Voting Algorithm\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The PoAI mechanism organises voting and cannot directly influence its results or participate in voting. It will have an identical ML model internally to that of the block builder and generate its own version of the block with each new round of assembly.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"PoAI and block builders review transactions from the mempool and build an efficient block for the round. The block generated by PoAI is considered as the reference block and is compared with the blocks generated by the builders. If the newly generated block is more efficient than the current reference block, it becomes the new reference block.\"\n    }), \"\\n\", _jsx(\"div\", {\n      children: _jsx(\"img\", {\n        src: \"/img/Screenshot 2024-05-01 at 9.03.21â€¯AM.png\",\n        alt: \"PoAI BLock Builders\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"PoAI removes block builders who have successfully submitted blocks to the chain during the last N-block period from the voting list. Implementing such a timeout allows all block builders to receive a reward for assembling a block and reduces the risk of unfair assemblies from one of the participants. The PoAI mechanism participates in all block assemblies from the very beginning of the chain. It will also have information about all voting results, and the block collected by the PoAI mechanism will be considered the reference block.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The chosen reference block is vital and ensures that, despite users' choices, manipulating the mechanism is improbable, as it removes manual interference. For each block builder admitted to voting, the PoAI mechanism will check the accuracy of the efficiency coefficient based on the percentage of the block filled with useful information, assess its quality, comparing it with its reference block.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The coefficient is the numeric value based on the efficiency (Input minus Output) of the amount of block creation. So, two objectives are required:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"The volume of Points in the block is biased towards being the maximum possible.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The PointPrice is as stable as possible, so it is biased towards being as similar as possible to the previous block generation.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the useful efficiency coefficient is higher than that of the reference block, the PoAI mechanism will give such a block builder the highest score and, after double-checking, consider its block the reference block for the current round of assembly. Block quality is an additional parameter, not the main one for voting, but one that the AI-validator model algorithm can use when making a decision.\"\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n\n","/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["frontMatter","sidebar_label","sidebar_position","contentTitle","assets","toc","_createMdxContent","props","_components","h1","header","li","p","ul","components","children","id","src","alt","MDXContent","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents","MDXProvider","properties","allComponents","disableParentContext","Provider","value"],"sourceRoot":""}